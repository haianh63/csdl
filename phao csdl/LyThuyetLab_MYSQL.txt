Lab1

Tạo: CREATE DATABASE test5;
Xóa: DROP DATABASE test5;
Tạo bảng:
	CREATE TABLE Listname( 
		STT INT PRIMARY KEY, 
		name VARCHAR(255) NOT NULL, 
		age INT );

	
	CREATE TABLE + tên bảng(
	tên cột + kiểu dữ liệu + đặc điểm.
)
Lab2: Tạo bảng, và thao tác liên kết khóa

Cài đặt liên kết khóa: 
ALTER TABLE products 
	ADD CONSTRAINT fk_products_productsLine 
	FOREIGN KEY (productLine) REFERENCES productlines(productLine);

Lab3 Truy vấn cơ bản (BASIC QUERIES)
SELECT: chọn tài liệu in ra
ex:
	SELECT *
	FROM orders

WHERE : Điều kiện  lọc, có thể kết hợp với AND OR
VD 
	SELECT *
	FROM orders
	WHERE orders.orderNumber = 10100 OR orders.orderNumber = 10101

DISTINCT: Lọc trùng lặp
ex

	SELECT DISTINCT *
	FROM orders

	SELECT DISTINCT jobTitle 
	FROM employees;

LIMIT: Giới hạn số lượng bản ghi trả về
ex
	SELECT *
	FROM customers
	WHERE country = 'France'
	LIMIT 10;


IS NULL: Tìm kiếm giá trị null
ko sử dụng so sánh bằng dấu  = ;

ex
	SELECT *
	FROM orders
	WHERE comments IS NULL;



Thứ tự cú pháp
SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY
LIMIT



lab4 BASIC QUERIES (PART 2) (truy vấn cơ bản phần 2)
IN: đưa ra giá trị của một phần tử thuộc tập giá trị nào đó, Kết hợp với WHERE, Truy vấn con v.v
	=>> sử dụng thay cho toán tử OR, có thể dùng NOT để phủ định điều kiện
	ex
	SELECT DISTINCT *
	FROM products
	WHERE productLine IN('Classic Cars');

	=>> bt 5 lab3
	
	SELECT officeCode, city, phone
	FROM offices
	WHERE country = 'USA' OR country = 'France';
	
	tương tự	

	SELECT officeCode, city, phone
	FROM offices
	WHERE country IN ('USA','France');
	
	toán tử NOT	

	SELECT officeCode, city, phone
	FROM offices
	WHERE country NOT IN ('USA','France')
	

BETWEEN : Đưa ra kết quả trong một phạm vi cụ thể, ví dụ bt4 lab 3
	=>> có thể sử dụng toán tử NOT giống IN để phủ định
		NOT BETWEEN

	ex
	SELECT *
	FROM orders
	WHERE shippedDate BETWEEN '2005-04-01' AND  '2005-04-30' AND status = 'Shipped' 

	kết quả: 10

ORDER BY: Sắp xếp kết quả theo thứ tự giảm dần (DESC) hoặc tăng dần (ASC).
	nếu gọi ORDER BY mà ko kèm kiểu sắp xếp. mặc định sẽ là tăng dẫn (ASC) 
	
	ex:
	SELECT productCode, productName, (quantityInStock * buyPrice ) AS total
	FROM products
	//GROUP BY productCode
	ORDER BY total DESC

	tùy điều kiện, mục đích, có thể sử dụng gom nhóm (GROUP BY) hoặc không

Derived Attribute : thuộc tính dẫn xuất hay các thuộc tính phát sinh khi sử dụng kết hợp các toán tử, hàm truy vấn. không được sử dụng trực tiếp trong các câu truy vấn khác, có thể đổi tên cột bằng  hàm AS	

	ex	
	SELECT orderNumber, (priceEach*quantityOrdered) as lineTotal
	FROM orderdetails;

	ex
	SELECT productCode, productName, (quantityInStock * buyPrice ) AS total
	FROM products

LIKE: Toán tử truy vấn, đại diện cho truy xuất kết quả có đặc điểm của LIKE đưa ra
	Đặc trưng bởi:	% : đại diện cho bất kì chữ hoặc nhóm chữ nào
				LIKE 'X%'  => bắt đầu bằng X
				LIKE '%X'  => kết thúc bằng X
				LIKE '%X%' => trong chuỗi có X
				
				X có thể là chữ hoặc số, hoặc cụm chữ, cụm số

			_ : đại diện cho 1 kí tự 
				
				LIKE '_' => chỉ chứa 1 kí tự
				LIKE '_00%' Bắt đầu bằng chuỗi X00
				
				v.v
	ex
	SELECT *
	FROM customers
	WHERE customers.customerName LIKE 'A%'
	
	kết quả 16

	SELECT *
	FROM customers
	WHERE customers.customerName LIKE '_A%'
	
	kí tự thứ 2 là A

	kết quả 20;


UNION: Thực hiện nối kết quả của 2 truy vấn vào chung 1 bảng để hiển thị
	-,Thỏa mãn yêu cầu sau
		+, Số lượng cột in ra trong các truy vấn là giống nhau
		+, Miền giá trị của các cột tương ứng trong các truy vấn là giống nhau, hoặc có thể chuyển đổi qua lại với nhau
	
	-, Mặc định, nếu không sử dụng DISTINCT, Kết quả trả về của phép UNION cũng tự động loại bỏ các hàm trùng lặp
	-, Sử dụng UNION ALL để giữ lại các hàm trùng lặp tùy mục đích
	-, Lưu ý, khi muốn dùng ORDER BY, phải thực hiện UNION xong mới ORDER BY, (vd 2)

	-, Nếu tên cột không giống nhau, phép UNION mặc định sẽ chọn tên cột của phép Select đầu tiên để đặt tên

	ex
	SELECT customerNumber  AS id, contactLastname AS name
	FROM customers
	UNION
	SELECT employeeNumber AS id, lastName AS name
	FROM employees;


	ex2
	(SELECT customerNumber, contactLastname
	FROM customers)
	UNION
	(SELECT employeeNumber, firstname
	FROM employees)
	ORDER BY contactLastname, customerNumber;


LAB5: COMMON FUNCTIONS IN MYSQL (Chức năng chung)

SUBSTRING: Trả về một chuỗi con
 trong chuỗi str bắt đầu từ 1 vị trí cụ thể (pos) , bao nhiêu kí tự (len);
	SUBSTRING(str, pos);
	SUBSTRING(str, pos, len);	

CONCAT:	 Nối hai hoặc nhiều chuỗi với nhau.
	-, nếu bất kì chuỗi con nào NULL -=> NULL
	CONCAT(str1,str2,...)

	ex
	SELECT CONCAT(contactLastname,', ',contactFirstname)
	AS fullname
	FROM customers

CONCAT_WS: sử dụng để nối các chuỗi với kí tự phân cách cho trước (seperator)
	CONCAT_WS(seperator,str1,str2,...)
	ex
	SELECT CONCAT_WS('; ',contactLastname,contactFirstname)
	AS fullname	
	FROM customers	

REPLACE: Thay thế một chuỗi thành chuỗi mới, kết hợp câu lệnh SET UPDATE;
	-, Lưu ý, có phân biệt chữ hoa, chữ thường	
	system
	UPDATE <tên bảng>
	SET tên cột = REPLACE(tên cột,xâu cần tìm,xâu thay thế)
	WHERE <các điều kiện>
	
	ex
	UPDATE products
	SET productDescription =	
	REPLACE(productDescription,'abuot','about')

IF:	Trả về truy vấn theo điều kiện của hàm IF 
	-, expr : cấu trúc so sánh, điều kiện
	-, if_true_expr: kết quả trả về nếu expr đúng
	-, if_false_expr: kết quả trả về nếu expr sai	
	IF(expr,if_true_expr,if_false_expr)

	ex
	SELECT customerNumber,
	 customerName,
	 IF(state IS NULL,'N/A',state) state,
	 country
	FROM customers;	

	ex: kết họp hàm IF với các hàm tính toán
	SELECT SUM(IF(status = 'Shipped',1,0)) AS Shipped,
	SUM(IF(status = 'Cancelled',1,0)) AS Cancelled
	FROM orders;
	
LAST_INSERT_ID: Hàm LAST_INSERT_ID trả về ID của bản ghi cuối cùng được chèn vào bảng, với điều
kiện đólà ID của cột có thuộc tính AUTO_INCREMENT.Trong thiết kế cơ sở dữ liệu,
thường sử dụng một cột tự động tăng AUTO_INCREMENT

Time processing function: các chức năng xử lý thời gian
DATEDIFF: Trả về khoảng cách thời gian giữa 2 mốc đưa ra
	system
	DATEDIFF(expr1,expr2)
	
	ex
	SELECT orderNumber,
	DATEDIFF(requiredDate,shippedDate) AS daysLeft
	FROM orders
	ORDER BY daysLeft DESC;

	
ADDDATE: Trả về kết quả là giá trị sau khi thao tác trên một thời gian khác
	+, có thể thay thế INTERVAL 30 DAY thành YEAR hoặc MONTH
	ex
	SELECT ADDDATE(NOW(), INTERVAL 30 DAY);  
	+, NOW(): thời gian hiện tại : có thể thay thế bằng 1 truy vấn thời gian
	+, INTERVAL 30 DAY: số ngày cộng vào 

	ex
	SELECT *
	FROM orders
	WHERE orderDate>= '2005-5-1' AND orderDate < ADDDATE('2005-
	5-1', INTERVAL 30 DAY); 
	
	ex
	SELECT *
	FROM orders
	WHERE orderDate >= '2005-05-01' AND orderDate <=  ADDDATE('2005-05-01', INTERVAL 30 DAY);
	
EXTRACT: Tách ra các giá trị như ngày, tháng, năm từ một giá trị có kiểu thời
gian.
	ex
	SELECT EXTRACT(MONTH FROM '2004-12-31 23:59:59');
	kết quả: 12

	=> Thay thế MONTH, DAY, YEAR theo mục đích

	ex
	SELECT *
	FROM orders
	WHERE EXTRACT(YEAR FROM orderDate) = 2005 and EXTRACT(MONTH
	FROM orderDate) = 5; 


Lab6	GROUP QUERIES (Truy vấn nhóm)
SUM: Tính tổng của một nhóm cơ sở dữ liệu
	ex
	SELECT SUM(products.quantityInStock * buyPrice) total
	FROM products

AVG: Tính giá trị trung bình của một nhóm cơ sở dữ liệu (trong các phần tử thuộc tính, không chưa giá trị NULL)
	(có thể sử dụng IF để trả về 0 với các giá trị NULL)
	ex
	SELECT AVG(products.quantityInStock * buyPrice) total
	FROM products
 
MAX: 	trả về giá trị Max của một tập giá trị
MIN:	trả về giá trị Min của một tập giá trị
	ex
	SELECT MAX(products.quantityInStock * buyPrice) AS max,
    	MIN(products.quantityInStock * buyPrice) AS min
	FROM products

COUNT: Đếm số lượng các hàng có giá trị khác NULL 
	(Kết hợp truy vấn tùy mục đích)
	ex
	SELECT COUNT(products.productCode)
	FROM products	

GROUP BY: Gom nhóm các bản ghi có cùng một giá trị tại một hoặc nhiều cột thành một tập hợp theo một yêu cầu nào đó, bỏ qua các giá trị NULL
	system

	SELECT col1_,col_2,... col_n, các hàm nhóm(biểu thức)
	FROM tên bảng
	WHERE điều kiện
	GROUP BY col_1, col_2, ... col_n
	ORDER BY danh sách cột

	ex
	SELECT status
	FROM orders
	GROUP BY status
	
	ex
	SELECT status, count(*)
	FROM orders
	GROUP BY status
	
	ex
	SELECT productCode,sum(priceEach * quantityOrdered) AS total
	FROM orderdetails
	GROUP BY productCode
	HAVING total > 10000

	có GROUP BY kết quả trả về 109 bản kết quả theo từng productCode
	ko có GROUP BY kết quả trả về 1 bản.


HAVING: Hàm điều kiện kết hợp với GROUP BY, sử dụng được cho các bí danh của các giá trị truy vấn trong select
	(Khi không đi chung với GROUP BY, HAVING có tác dụng như WHERE)

	ex
	SELECT productCode,sum(priceEach * quantityOrdered) AS total
	FROM orderdetails
	GROUP BY productCode
	HAVING total > 10000
	kết quả 109 bản




LAB 7 MYSQL JOIN (Nối bảng)
INNER JOIN: (Nối trong) có thể nối một hoặc nhiều bảng với bảng chỉnh, đáp ứng điều kiện nối
	-, Khi nối bảng, muốn tham chiều tới phần tử cột của bảng cần dùng tên bảng (hoặc bí danh) để tham chiếu, tránh trùng dữ liệu
	-, 
	ex1
	SELECT	products.productCode, 
		products.productName,
		orderDetails.orderNumber
	FROM products
	INNER JOIN orderDetails on products.productCode =
		orderDetails.productCode;

	ex1: Sử dụng bí danh	

	SELECT p.productCode, p.productName, o.orderNumber
	FROM products p
	INNER JOIN orderDetails o on p.productCode = o.productCode;
	
	ex2
	SELECT p.productCode ,
		SUM(od.quantityOrdered * od.priceEach) as total
	FROM products p INNER JOIN orderdetails od ON p.productCode = od.productCode
	GROUP BY p.productCode
	ORDER BY total
	
	ex3
	SELECT 	c.customerNumber ,
 	 	 c.customerName,
	        SUM(od.quantityOrdered* od.priceEach) AS total
	FROM customers c 
		INNER JOIN orders o ON c.customerNumber = o.customerNumber
		INNER JOIN orderdetails od ON o.orderNumber = od.orderNumber
	GROUP BY c.customerNumber
	ORDER BY total;
	
	ex3: Sử dụng SUBQUERY
	SELECT 	c.customerNumber ,
    		c.customerName,
         	(SELECT SUM(orderdetails.quantityOrdered*orderdetails.priceEach)
            	FROM orderdetails 
            	WHERE orderdetails.orderNumber IN
           	 	 (SELECT orders.orderNumber
           	 	  FROM orders
           	 	 WHERE orders.customerNumber = c.customerNumber)
          	) AS total
	FROM customers c 
	 
        GROUP BY c.customerNumber
        HAVING total IS NOT NULL
	ORDER BY  total;



	
LEFT JOIN: Cho phép chọn tất cả các hàng từ bảng bên trái ngay cả khi không
có bản ghi nào phù hợp với nó trong bảng bên phải.
(Phù hợp với việc cần lấy tất cả thông tin khách hàng, hoặc đơn hàng mặc dù nó chưa được thanh toán hoặc khách hàng chưa mua bất cứ thứ gì)

RIGHT JOIN: đảo chiều với LEFT JOIN

SELF JOIN: Một phép tự nối là một kiểu nối trong đó một bảng được nối với chính nó, cụ thể khi
một bảng có một khóa ngoài tham chiếu tới khóa chính của nó
	(Cần nhiều truy vấn trong 1 bảng)
	ex
	SELECT concat (e1.lastName ," ",e1.firstName) as fullname,
		e1.email, 
		concat (e2.lastName ," ",e2.firstName) as manager, 
		e2.email
	FROM employees e1, employees e2
	WHERE e1.reportsTo = e2.employeeNumber;


8 SUBQUERY (Truy vấn con)
Concept of Subquery:

Non-correlated subquery: (Truy vấn con không tương quan) Truy vấn con độc lập với truy vấn bên ngoài. được thi hành thi hành đầu tiên và một lần duy nhất cho toàn
bộ câu lệnh. Kết quả của truy vấn con được điền vào truy vấn bên ngoài, 
và sử dụng ở truy vấn bên ngoài
	SELECT *
	FROM products
	WHERE productCode not in	
		(SELECT productCode	
		FROM orderdetails
		)
	
Correlated subquery: (Truy vấn con tương quan) Truy vấn con có sử dụng dữ liệu của truy vấn bên ngoài.
	ex
	SELECT * FROM products p
	WHERE quantityInStock >
		(SELECt avg(quantityInStock)
		FROM products
		WHERE productLine = p.productLine
	)
Use subqueries: Có thể sử dụng truy vấn con ở cả SELECT và FROM 
	SELECT : Trả về kết quả cần hiển thị
	FROM: trả về một bảng cần nối thông tin

:Use subqueries to give information about orders and total value of this order (using
information from orders and orderdetails tables).
	(Sử dụng truy vấn con lấy thông tin về đơn hàng và tổng giá trị của đơn hàng đó)

	SELECT 	o.orderNumber,
		o.orderDate,
        	o.requiredDate,
        	o.shippedDate,
        	(SELECT SUM(od.quantityOrdered * od.priceEach)
       	 	FROM orderdetails od
        	WHERE o.orderNumber = od.orderNumber) AS totalValue
	FROM orders o
	ORDER BY o.orderNumber
